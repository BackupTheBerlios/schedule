/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Thu Jun 23 21:58:11 CEST 2005 by MyEclipse Hibernate Tool.
 */
package com.schedule.hibernate;

import java.io.Serializable;

/**
 * A class that represents a row in the Appointments table. 
 * You can customize the behavior of this class by editing the class, {@link Appointments()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractAppointments 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The simple primary key value. */
    private java.lang.Integer idAppointments;

    /** The value of the simple subject property. */
    private java.lang.String subject;

    /** The value of the simple date property. */
    private java.util.Date date;

    /** The value of the simple description property. */
    private java.lang.String description;

    /** Der User zu dem dieser Termin gehört */
    private User user;
    
    /** Das Projekt zu dem dieser Termin gehört */
    private Projects project;
    
    /**
     * Simple constructor of AbstractAppointments instances.
     */
    public AbstractAppointments()
    {
    }

    /**
     * Constructor of AbstractAppointments instances given a composite primary key.
     * @param id
     */
    public AbstractAppointments(java.lang.Integer idAppointments)
    {
        this.setIdAppointments(idAppointments);
    }

    /**
     * Return the composite id instance that identifies this object.
     * @return AppointmentsKey
     */
    public java.lang.Integer getIdAppointments()
    {
        return this.idAppointments;
    }

    /**
     * Set the composite id instance that identifies this object.
     * @param id
     */
    public void setIdAppointments(java.lang.Integer idAppointments)
    {
        this.hashValue = 0;
        this.idAppointments = idAppointments;
    }

    /**
     * Return the value of the Subject column.
     * @return java.lang.String
     */
    public java.lang.String getSubject()
    {
        return this.subject;
    }

    /**
     * Set the value of the Subject column.
     * @param subject
     */
    public void setSubject(java.lang.String subject)
    {
        this.subject = subject;
    }

    /**
     * Return the value of the Date column.
     * @return java.util.Date
     */
    public java.util.Date getDate()
    {
        return this.date;
    }

    /**
     * Set the value of the Date column.
     * @param date
     */
    public void setDate(java.util.Date date)
    {
        this.date = date;
    }

    /**
     * Return the value of the Description column.
     * @return java.lang.String
     */
    public java.lang.String getDescription()
    {
        return this.description;
    }

    /**
     * Set the value of the Description column.
     * @param description
     */
    public void setDescription(java.lang.String description)
    {
        this.description = description;
    }
    
    /**
     * liefert den User zurück, zu dem dieser Termin gehört
     * @return User user
     */
    public User getUser()
    {
    	return user;
    }

    /**
     * setzt den User, zu dem dieser Termin gehört
     * @param user
     */
    public void setUser(User user)
    {
    	this.user = user;
    }
    
    /** 
     * liefert das Projekt zurück, zu dem dieser Termin gehört 
     * @return Projects project 
     * */
    public Projects getProject()
    {
    	return project;
    }
    
    /** 
     * setzt das Projekt, zu dem dieser Termin gehört
     * @param project
     *  */
    public void setProject(Projects project)
    {
    	this.project = project;
    }
    
    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof Appointments))
            return false;
        Appointments that = (Appointments) rhs;
        if (this.getIdAppointments() != null && that.getIdAppointments() != null)
        {
            return (this.getIdAppointments().equals(that.getIdAppointments()));
        }
        return true;
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            if (this.getIdAppointments() == null)
            {
                result = super.hashCode();
            }
            else
            {
                result = this.getIdAppointments().hashCode();
            }
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
